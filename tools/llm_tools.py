import os
import requests
from datetime import datetime
from dotenv import load_dotenv
from langchain.tools import tool
from tavily import TavilyClient
import operator

load_dotenv()
if os.getenv("TAVILY_API_KEY") is None:
    raise ValueError("TAVILY_API_KEY not found in .env file")
if os.getenv("WEATHER_API_KEY") is None:
    raise ValueError("WEATHER_API_KEY not found in .env file")

# Internet and Weather clients
tavily_client = TavilyClient(api_key=os.getenv("TAVILY_API_KEY"))
weather_api_key = os.getenv("WEATHER_API_KEY")

@tool
def get_current_date_tool() -> str:
    """
    Use this tool to get the current date.
    """
    print(" Getting Current Date ")
    return f"Today's date is {datetime.now().strftime('%A, %B %d, %Y')}."

@tool
def get_weather_tool(location: str) -> str:
    """
    Use this tool to get the current weather for a specific location.
    The input should be a city name, e.g., 'San Francisco', or 'city, country', e.g., 'Paris, France'.
    """
    print(f" Getting Weather for: '{location}' ")
    url = f"http://api.weatherapi.com/v1/current.json?key={weather_api_key}&q={location}&aqi=no"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        
        city = data['location']['name']
        region = data['location']['region']
        country = data['location']['country']
        temp_c = data['current']['temp_c']
        temp_f = data['current']['temp_f']
        condition = data['current']['condition']['text']
        wind_mph = data['current']['wind_mph']
        
        return (
            f"The current weather in {city}, {region}, {country} is {temp_f}°F ({temp_c}°C) "
            f"with {condition}. The wind speed is {wind_mph} mph."
        )
    except requests.exceptions.HTTPError as http_err:
        if response.status_code == 400:
            return f"Error: Could not find weather for the location '{location}'. Please specify a valid city name."
        return f"An HTTP error occurred: {http_err}"
    except Exception as e:
        return f"An error occurred while fetching weather data: {e}"

@tool
def internet_search_tool(query: str) -> str:
    """
    Use this tool to search the internet for recent information, news, or when
    the arXiv tool fails to find relevant research papers.
    The input should be a clear, specific search query.
    """
    print(f" Performing Internet Search for: '{query}' ")
    try:
        results = tavily_client.search(query=query, search_depth="basic", max_results=3)
        formatted_results = "\n\n".join(
            f"**Title**: {res['title']}\n**URL**: {res['url']}\n**Content**: {res['content']}"
            for res in results['results']
        )
        return f"Here are the search results for '{query}':\n\n{formatted_results}"
    except Exception as e:
        return f"An error occurred during internet search: {e}"

@tool
def math_tool(expression: str) -> str:
    """
    Use this tool to solve mathematical expressions.
    The input should be a valid mathematical expression (e.g., '2 + 2', '10 / 5 * 2').
    """
    print(f" Calculating Expression: '{expression}' ")
    try:
        # A simple, safer way to evaluate expressions
        result = eval(expression, {"__builtins__": None}, {})
        return f"The result of '{expression}' is {result}. The source of this information is the Model."
    except Exception as e:
        return f"Error calculating expression: {e}"

@tool
def code_assistant_tool(query: str) -> str:
    """
    Use this tool when you need to answer a coding or programming question,
    write a code snippet, or explain a programming concept.
    The input should be a clear question about coding.
    """
    print(f" Providing Coding Assistance for: '{query}' ")
    return (
        "The following code is a solution generated by the model based on your request. "
        "Source of this information: Model."
    )